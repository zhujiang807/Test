<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/mvc
    		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">


	<!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository注解已被注入 -->
	<context:component-scan base-package="com.friendship" />
	<context:component-scan base-package="com.java" />
	<aop:aspectj-autoproxy />
	<context:annotation-config />

	<!-- mysql扩展 -->
	<bean id="mySqlExtend" class="com.java.util.MySqlExtend"></bean>

	<!-- 数据库配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver">
		</property>
		<property name="url"
			value="jdbc:mysql://localhost:3306/test?characterEncoding=utf-8">
		</property>
		<property name="username" value="root"></property>
		<property name="password" value="admin"></property>
	</bean>

	<!-- sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5Dialect <!-- Oracle(org.hibernate.dialect.OracleDialect) -->
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- 可以自动创建数据库表(create),不创建(none) -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">true</prop>
			</props>
		</property>
		<!-- 包扫描的方式加载注解类 -->
		<property name="packagesToScan">
			<list>
				<value>com.java.po</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		order="2" />

	<!-- SpringMVC上传文件时,需配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小不能超过800KB......注意maxUploadSize属性的限制不是针对单个文件,而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="5000000000" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时,自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException"></prop>
			</props>
		</property>
	</bean>

	<!-- 配置定时器 -->

	<bean id="cacheBase" class="com.java.util.CacheBase"></bean>

	<!-- 定义调用对象和调用对象的方法 -->
	<bean id="jobtask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject">
			<ref bean="cacheBase" />
		</property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod">
			<value>remove</value>
		</property>
	</bean>
	<!-- 定义触发时间 -->
	<bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="jobtask" />
		</property>
		<!-- cron表达式 -->
		<property name="cronExpression">
			<!-- 每隔5秒执行一次 -->
			<value>* * */1 * * ?</value>
		</property>
	</bean>
	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doTime" />
			</list>
		</property>
	</bean>

	<!-- springmvc配置 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 如果使用jstl的话，配置下面的属性 -->
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- webroot到某一指定的文件夹的路径 -->
		<property name="prefix" value="/WEB-INF/html/"></property>
		<!-- 视图名称的后缀 -->
		<property name="suffix" value=".html"></property>
	</bean>

	<!-- action拦截器 -->
	<mvc:interceptors>
		<bean class="com.java.util.interceptor.ActionVerifyInterceptor"></bean>
	</mvc:interceptors>

</beans>